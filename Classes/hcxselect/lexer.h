#line 2 "lexer.h"

#line 4 "lexer.h"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 25
#define YY_END_OF_BUFFER 26
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[193] =
    {   0,
        0,    0,   26,   24,    1,    1,   18,   24,   24,   18,
       24,   12,   14,   24,   24,   24,   10,   24,   24,   13,
       24,    7,   24,   24,   24,   15,    1,   12,   14,   13,
       15,   18,    8,    0,   18,   11,    0,    5,   18,    0,
       18,    6,    0,    7,    0,   10,    0,   19,    0,    0,
       10,   20,    0,    0,    0,    0,    0,   17,    0,    9,
        7,    0,    7,    7,    4,    3,    2,   18,   18,   18,
       11,   11,   18,   18,   18,   22,    0,    0,   20,    0,
       20,   20,    0,    0,    0,    0,    0,    0,    0,   17,
        0,   17,   17,    7,    7,    7,    7,   18,   18,   18,

       11,   11,   18,   18,   18,    0,   23,   20,   20,   20,
       20,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       21,   17,   17,   17,   17,    7,    7,    7,   18,   11,
       18,    0,    0,   20,   20,   20,   16,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,   17,   17,
        7,    7,   18,   11,   18,   20,   20,    0,    0,    0,
        0,    0,    0,   17,   17,    7,    7,   18,   11,   18,
       20,   20,    0,    0,    0,    0,   17,   17,    7,    7,
       18,   11,   18,   20,   20,    0,   17,   17,    7,   20,
       17,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    6,    7,    8,    9,   10,    1,   11,   12,
        1,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   21,   22,   23,   24,   20,   20,   25,    1,   26,
       27,   28,    1,   29,   30,   30,   30,   30,   31,   32,
       33,   33,   33,   33,   33,   33,   33,   34,   35,   33,
       33,   33,   33,   36,   33,   33,   33,   33,   33,   33,
        1,   37,    1,   38,   33,    1,   30,   30,   30,   30,

       39,   40,   33,   33,   33,   33,   33,   33,   33,   41,
       42,   33,   33,   33,   33,   43,   33,   33,   33,   33,
       33,   33,    1,   44,    1,   45,    1,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46
    } ;

static yyconst flex_int32_t yy_meta[47] =
    {   0,
        1,    1,    2,    2,    2,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    4,    1,    1,    5,    5,
        5,    5,    5,    5,    1,    1,    1,    1,    1,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    6,    6,
        6,    6,    6,    1,    1,    6
    } ;

static yyconst flex_int16_t yy_base[214] =
    {   0,
        0,    0,  441, 1838,   45,    0,   45,  396,  394,   40,
      390, 1838, 1838,   37,   42,  391,   82,   34,  397, 1838,
       39,   42,  110,  371,  361,  360,    0, 1838, 1838, 1838,
     1838,   50, 1838,  148,   51,  344,  170, 1838,   74,  208,
       89, 1838,  333,   44,  230,  254,  345, 1838,  320,  124,
        0,  302,  260,  119,  141,  317,   56,  281,  282, 1838,
       57,  304,   58,  343, 1838, 1838, 1838,  120,  170,  388,
      279,  433,  128,  222,  478, 1838,  282,   65,  251,  506,
      250,  545,  160,  199,  162,  124,  145,  182,  251,  228,
      573,  219,  612,   72,  657,  252,  685,  198,  304,  707,

      205,  729,  226,  283,  751,  233, 1838,  199,  790,  220,
      818,  214,  274,  319,  166,  226,  178,  330,  857,    0,
     1838,  158,  898,  282,  926,  357,  948,  970,  992, 1014,
     1036,  173,  186,  294, 1058, 1080, 1838,  377,  138,  137,
      125,  333, 1119,    0,  349,  295,  516,  368, 1144, 1166,
     1188, 1210, 1232, 1254, 1276, 1298, 1320,  378,  411,  403,
      272,  403,   87, 1342, 1364, 1386, 1408, 1430, 1452, 1474,
     1496, 1518,  423,   95,   77,  115, 1540, 1562, 1584,  483,
     1606, 1628, 1650, 1672,  456,  221, 1694,  502,  427,  509,
      529, 1838, 1734, 1737, 1743, 1746, 1749, 1753, 1759, 1765,

     1771, 1777, 1783,   61, 1786, 1792, 1795, 1801, 1807, 1813,
     1819, 1825, 1831
    } ;

static yyconst flex_int16_t yy_def[214] =
    {   0,
      192,    1,  192,  192,  192,    5,  193,  194,  192,  195,
      192,  192,  192,  196,  192,  192,  192,  192,  192,  192,
      197,  198,  199,  192,  192,  192,    5,  192,  192,  192,
      192,  193,  192,  200,  193,  194,  201,  192,  195,  202,
      195,  192,  192,  198,  199,   17,  203,  192,  204,  192,
       17,  205,  206,  192,  192,  192,  197,  207,  208,  192,
      198,  209,  198,  192,  192,  192,  192,  193,  193,  193,
      194,  192,  195,  195,  195,  192,  203,  210,  205,  211,
      205,  192,  192,  192,  192,  192,  192,  192,  192,  207,
      212,  207,  192,  198,  192,  198,   64,  193,  193,   70,

      194,   72,  195,  195,   75,  213,  192,  205,  192,  205,
       82,  192,  192,  192,  192,  192,  192,  192,  192,  119,
      192,  207,  192,  207,   93,  198,   95,   64,   70,   72,
       75,  213,  210,  205,  109,   82,  192,  192,  192,  192,
      192,  192,  192,  143,  192,  192,  192,  207,  123,   93,
       95,   64,   70,   72,   75,  109,   82,  192,  192,  192,
      192,  192,  192,  123,   93,   95,   64,   70,   72,   75,
      109,   82,  192,  192,  192,  192,  123,   93,   95,  198,
       70,   72,   75,  109,  205,  192,  123,  207,  180,  185,
      188,    0,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192
    } ;

static yyconst flex_int16_t yy_nxt[1885] =
    {   0,
        4,    5,    6,    5,    5,    4,    7,    8,    9,    4,
       10,    4,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   18,   19,    4,   20,   21,   22,
       22,   22,   22,   22,   22,   22,   23,   24,   22,   22,
       22,   22,   22,   25,   26,   22,   27,   27,   27,   27,
       33,   33,   43,   60,   57,   60,   33,   33,   28,   29,
       46,   46,   46,   46,   46,   46,   52,   54,   60,   60,
       55,  192,   30,   45,   54,   59,   40,   78,   62,  174,
       62,   34,  107,   60,   33,   41,   34,   34,  137,   31,
       35,   48,   59,   62,   62,   35,   35,   49,   50,   33,

       51,   51,   51,   51,   51,   51,  137,   86,   62,   87,
       40,   52,   52,   52,   52,   52,   52,   52,   53,   41,
       52,   52,   52,   52,   52,   40,   33,   52,   64,   64,
       64,   64,   64,   64,   41,  115,  137,  116,   33,   64,
       64,   64,   46,   46,   46,   46,   46,   46,   64,   64,
       32,   32,   69,   83,  119,   84,   34,  159,  159,   85,
       83,   86,  119,   87,   40,   35,   70,   70,   70,   70,
       70,   70,   32,   41,   88,  120,   33,   70,   70,   70,
      118,   88,   86,  120,   87,  133,   70,   70,   72,   72,
       72,   72,   72,   72,   91,  112,  113,  143,  133,   72,

       72,   72,  112,  107,   33,  143,   34,   71,   72,   72,
       39,   39,   74,  112,  113,   35,   83,  114,   84,  115,
      112,  116,   81,   83,   39,  137,   75,   75,   75,   75,
       75,   75,   33,  117,   34,   80,   33,   75,   75,   75,
      117,   37,  139,   35,  140,  133,   75,   75,   64,   64,
       64,   64,   64,   64,   63,   91,   80,  144,   40,   64,
       64,   64,   40,   60,   91,  144,  121,   41,   64,   64,
      192,   41,   46,   46,   46,   46,   46,   46,   82,   82,
       82,   82,   82,   82,   92,   73,   80,   80,   62,   82,
       82,   82,  138,   33,   78,  139,  108,  140,   82,   82,

       93,   93,   93,   93,   93,   93,   68,  112,  113,  141,
       33,   93,   93,   93,  112,   37,  141,   91,   91,   40,
       93,   93,   95,   95,   95,   95,   95,   95,   41,   83,
       80,   84,   89,   95,   95,   95,   83,  142,   80,  115,
       34,  116,   95,   95,   63,   63,   63,   96,  145,   35,
       86,  160,   87,  115,   60,  116,   53,   78,   61,   94,
       76,   97,   97,   97,   97,   97,   97,  163,   60,   86,
      122,   87,   97,   97,   97,   61,   61,   61,   61,   62,
       37,   97,   97,   61,   61,   61,   67,   66,   61,   98,
       68,   68,   99,   62,   33,  158,  173,   65,  139,  139,

      140,  140,   56,   47,   91,  161,  100,  100,  100,  100,
      100,  100,  174,  174,  174,  175,   42,  100,  100,  100,
       38,  176,  137,  115,   34,  116,  100,  100,   94,   94,
       94,  126,   37,   35,   71,   71,   71,  101,  112,  113,
      192,  186,  192,  192,  139,  112,  140,  192,   36,  192,
      192,  102,  102,  102,  102,  102,  102,   81,   81,   81,
      110,  192,  102,  102,  102,   36,   36,   36,   36,   37,
      192,  102,  102,   36,   36,   36,  192,  192,   36,  103,
       73,   73,  104,  192,   63,   63,   63,   96,   33,  192,
      192,  192,   80,  192,   60,  192,  105,  105,  105,  105,

      105,  105,  192,   92,   92,   92,  124,  105,  105,  105,
      108,  108,  108,  134,   40,  192,  105,  105,  146,   62,
      192,  192,  192,   41,  109,  109,  109,  109,  109,  109,
      122,  122,  122,  148,  192,  109,  109,  109,   91,  192,
      192,  192,  192,  192,  109,  109,   81,   81,   81,  110,
       83,  192,   84,  192,  192,  192,  192,   83,  192,  192,
       79,  192,  192,  111,  111,  111,  111,  111,  111,  192,
      192,  192,  192,  192,  111,  111,  111,   79,   79,   79,
       79,   80,  192,  111,  111,   79,   79,   79,  192,  192,
       79,  123,  123,  123,  123,  123,  123,  192,  192,  192,

      192,  192,  123,  123,  123,  192,  192,  192,  192,  192,
      192,  123,  123,   92,   92,   92,  124,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,   90,  192,  192,
      125,  125,  125,  125,  125,  125,  192,  192,  192,  192,
      192,  125,  125,  125,   90,   90,   90,   90,   91,  192,
      125,  125,   90,   90,   90,  192,  192,   90,   94,   94,
       94,  126,  192,  192,  192,  192,  192,  192,   60,  192,
      192,  192,   61,  192,  192,  127,  127,  127,  127,  127,
      127,  192,  192,  192,  192,  192,  127,  127,  127,   61,
       61,   61,   61,   62,  192,  127,  127,   61,   61,   61,

      192,  192,   61,  128,  128,  128,  128,  128,  128,  192,
      192,  192,  192,  192,  128,  128,  128,  192,  192,  192,
      192,  192,  192,  128,  128,  129,  129,  129,  129,  129,
      129,  192,  192,  192,  192,  192,  129,  129,  129,  192,
      192,  192,  192,  192,  192,  129,  129,  130,  130,  130,
      130,  130,  130,  192,  192,  192,  192,  192,  130,  130,
      130,  192,  192,  192,  192,  192,  192,  130,  130,  131,
      131,  131,  131,  131,  131,  192,  192,  192,  192,  192,
      131,  131,  131,  192,  192,  192,  192,  192,  192,  131,
      131,  108,  108,  108,  134,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,   79,  192,  192,  135,  135,
      135,  135,  135,  135,  192,  192,  192,  192,  192,  135,
      135,  135,   79,   79,   79,   79,   80,  192,  135,  135,
       79,   79,   79,  192,  192,   79,  136,  136,  136,  136,
      136,  136,  192,  192,  192,  192,  192,  136,  136,  136,
      192,  192,  192,  192,  192,  192,  136,  136,  146,  146,
      146,  147,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,   83,  192,   84,  192,  192,  192,  192,   83,  122,

      122,  122,  148,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,   90,  192,  192,  149,  149,  149,  149,
      149,  149,  192,  192,  192,  192,  192,  149,  149,  149,
       90,   90,   90,   90,   91,  192,  149,  149,   90,   90,
       90,  192,  192,   90,  150,  150,  150,  150,  150,  150,
      192,  192,  192,  192,  192,  150,  150,  150,  192,  192,
      192,  192,  192,  192,  150,  150,  151,  151,  151,  151,
      151,  151,  192,  192,  192,  192,  192,  151,  151,  151,
      192,  192,  192,  192,  192,  192,  151,  151,  152,  152,
      152,  152,  152,  152,  192,  192,  192,  192,  192,  152,

      152,  152,  192,  192,  192,  192,  192,  192,  152,  152,
      153,  153,  153,  153,  153,  153,  192,  192,  192,  192,
      192,  153,  153,  153,  192,  192,  192,  192,  192,  192,
      153,  153,  154,  154,  154,  154,  154,  154,  192,  192,
      192,  192,  192,  154,  154,  154,  192,  192,  192,  192,
      192,  192,  154,  154,  155,  155,  155,  155,  155,  155,
      192,  192,  192,  192,  192,  155,  155,  155,  192,  192,
      192,  192,  192,  192,  155,  155,  156,  156,  156,  156,
      156,  156,  192,  192,  192,  192,  192,  156,  156,  156,
      192,  192,  192,  192,  192,  192,  156,  156,  157,  157,

      157,  157,  157,  157,  192,  192,  192,  192,  192,  157,
      157,  157,  192,  192,  192,  192,  192,  192,  157,  157,
      161,  161,  161,  162,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  112,  113,  192,  192,  192,  192,
      192,  112,  164,  164,  164,  164,  164,  164,  192,  192,
      192,  192,  192,  164,  164,  164,  192,  192,  192,  192,
      192,  192,  164,  164,  165,  165,  165,  165,  165,  165,
      192,  192,  192,  192,  192,  165,  165,  165,  192,  192,

      192,  192,  192,  192,  165,  165,  166,  166,  166,  166,
      166,  166,  192,  192,  192,  192,  192,  166,  166,  166,
      192,  192,  192,  192,  192,  192,  166,  166,  167,  167,
      167,  167,  167,  167,  192,  192,  192,  192,  192,  167,
      167,  167,  192,  192,  192,  192,  192,  192,  167,  167,
      168,  168,  168,  168,  168,  168,  192,  192,  192,  192,
      192,  168,  168,  168,  192,  192,  192,  192,  192,  192,
      168,  168,  169,  169,  169,  169,  169,  169,  192,  192,
      192,  192,  192,  169,  169,  169,  192,  192,  192,  192,
      192,  192,  169,  169,  170,  170,  170,  170,  170,  170,

      192,  192,  192,  192,  192,  170,  170,  170,  192,  192,
      192,  192,  192,  192,  170,  170,  171,  171,  171,  171,
      171,  171,  192,  192,  192,  192,  192,  171,  171,  171,
      192,  192,  192,  192,  192,  192,  171,  171,  172,  172,
      172,  172,  172,  172,  192,  192,  192,  192,  192,  172,
      172,  172,  192,  192,  192,  192,  192,  192,  172,  172,
      177,  177,  177,  177,  177,  177,  192,  192,  192,  192,
      192,  177,  177,  177,  192,  192,  192,  192,  192,  192,
      177,  177,  178,  178,  178,  178,  178,  178,  192,  192,
      192,  192,  192,  178,  178,  178,  192,  192,  192,  192,

      192,  192,  178,  178,  179,  179,  179,  179,  179,  179,
      192,  192,  192,  192,  192,  179,  179,  179,  192,  192,
      192,  192,  192,  192,  179,  179,  180,  180,  180,  180,
      180,  180,  192,  192,  192,  192,  192,  180,  180,  180,
      192,  192,  192,  192,  192,  192,  180,  180,  181,  181,
      181,  181,  181,  181,  192,  192,  192,  192,  192,  181,
      181,  181,  192,  192,  192,  192,  192,  192,  181,  181,
      182,  182,  182,  182,  182,  182,  192,  192,  192,  192,
      192,  182,  182,  182,  192,  192,  192,  192,  192,  192,
      182,  182,  183,  183,  183,  183,  183,  183,  192,  192,

      192,  192,  192,  183,  183,  183,  192,  192,  192,  192,
      192,  192,  183,  183,  184,  184,  184,  184,  184,  184,
      192,  192,  192,  192,  192,  184,  184,  184,  192,  192,
      192,  192,  192,  192,  184,  184,  185,  185,  185,  185,
      185,  185,  192,  192,  192,  192,  192,  185,  185,  185,
      192,  192,  192,  192,  192,  192,  185,  185,  187,  187,
      187,  187,  187,  187,  192,  192,  192,  192,  192,  187,
      187,  187,  192,  192,  192,  192,  192,  192,  187,  187,
      188,  188,  188,  188,  188,  188,  192,  192,  192,  192,
      192,  188,  188,  188,  192,  192,  192,  192,  192,  192,

      188,  188,  189,  189,  189,  189,  189,  189,  192,  192,
      192,  192,  192,  189,  189,  189,  192,  192,  192,  192,
      192,  192,  189,  189,   32,   32,   32,   32,   32,   32,
      192,  192,  192,  192,  192,   32,   32,   32,  192,  192,
      192,  192,  192,  192,   32,   32,   36,   36,   36,   36,
       36,   36,  192,  192,  192,  192,  192,   36,   36,   36,
      192,  192,  192,  192,  192,  192,   36,   36,   39,   39,
       39,   39,   39,   39,  192,  192,  192,  192,  192,   39,
       39,   39,  192,  192,  192,  192,  192,  192,   39,   39,
      190,  190,  190,  190,  190,  190,  192,  192,  192,  192,

      192,  190,  190,  190,  192,  192,  192,  192,  192,  192,
      190,  190,  191,  191,  191,  191,  191,  191,  192,  192,
      192,  192,  192,  191,  191,  191,  192,  192,  192,  192,
      192,  192,  191,  191,   32,  192,   32,   32,   32,   32,
       36,   36,   36,   39,  192,   39,   39,   39,   39,   44,
      192,   44,   58,  192,   58,   61,   61,   61,   61,   63,
      192,   63,   63,   63,   63,   68,   68,   68,   68,   68,
       68,   71,  192,   71,   71,   71,   71,   73,   73,   73,
       73,   73,   73,   77,   77,   77,   77,   77,   77,   79,
       79,   79,   81,  192,   81,   81,   81,   81,   90,   90,

       90,   92,  192,   92,   92,   92,   92,   94,  192,   94,
       94,   94,   94,  106,  106,  106,  106,  106,  106,  108,
      192,  108,  108,  108,  108,  122,  192,  122,  122,  122,
      122,  132,  132,  132,  132,  132,  132,    3,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192
    } ;

static yyconst flex_int16_t yy_chk[1885] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
       10,    7,   14,   22,   21,   44,   32,   35,    5,    5,
       15,   15,   15,   15,   15,   15,  204,   18,   61,   63,
       18,   57,    5,   14,   18,   21,   10,   78,   22,  175,
       44,    7,   78,   94,   39,   10,   32,   35,  175,    5,
        7,   17,   57,   61,   63,   32,   35,   17,   17,   41,

       17,   17,   17,   17,   17,   17,  174,  163,   94,  163,
       39,   17,   17,   17,   17,   17,   17,   17,   17,   39,
       17,   17,   17,   17,   17,   41,   68,   17,   23,   23,
       23,   23,   23,   23,   41,  176,  141,  176,   73,   23,
       23,   23,   50,   50,   50,   50,   50,   50,   23,   23,
       34,   34,   34,   54,   86,   54,   68,  140,  139,   55,
       54,   55,   86,   55,   73,   68,   34,   34,   34,   34,
       34,   34,   69,   73,   55,   87,   69,   34,   34,   34,
       85,   55,   85,   87,   85,  132,   34,   34,   37,   37,
       37,   37,   37,   37,  122,   83,   83,  115,  133,   37,

       37,   37,   83,  133,   98,  115,   69,  101,   37,   37,
       40,   40,   40,  117,  117,   69,   88,   84,   88,   84,
      117,   84,  110,   88,   74,  112,   40,   40,   40,   40,
       40,   40,   74,   84,   98,  108,  103,   40,   40,   40,
       84,  101,  186,   98,  186,  106,   40,   40,   45,   45,
       45,   45,   45,   45,   96,   92,  110,  116,   74,   45,
       45,   45,  103,   96,   90,  116,   89,   74,   45,   45,
       46,  103,   46,   46,   46,   46,   46,   46,   53,   53,
       53,   53,   53,   53,  124,  104,   81,   79,   96,   53,
       53,   53,  113,  104,   77,  113,  134,  113,   53,   53,

       59,   59,   59,   59,   59,   59,   99,  161,  161,  113,
       99,   59,   59,   59,  161,   71,  113,   58,  124,  104,
       59,   59,   62,   62,   62,   62,   62,   62,  104,  146,
      134,  146,   56,   62,   62,   62,  146,  114,   52,  114,
       99,  114,   62,   62,   64,   64,   64,   64,  118,   99,
      118,  142,  118,  142,   64,  142,   49,   47,   64,  126,
       43,   64,   64,   64,   64,   64,   64,  145,  126,  145,
      148,  145,   64,   64,   64,   64,   64,   64,   64,   64,
       36,   64,   64,   64,   64,   64,   26,   25,   64,   70,
       70,   70,   70,  126,   70,  138,  158,   24,  138,  158,

      138,  158,   19,   16,  148,  162,   70,   70,   70,   70,
       70,   70,  159,  159,  159,  159,   11,   70,   70,   70,
        9,  160,  159,  160,   70,  160,   70,   70,  189,  189,
      189,  189,    8,   70,   72,   72,   72,   72,  162,  162,
        3,  173,    0,    0,  173,  162,  173,    0,   72,    0,
        0,   72,   72,   72,   72,   72,   72,  185,  185,  185,
      185,    0,   72,   72,   72,   72,   72,   72,   72,   72,
        0,   72,   72,   72,   72,   72,    0,    0,   72,   75,
       75,   75,   75,    0,  180,  180,  180,  180,   75,    0,
        0,    0,  185,    0,  180,    0,   75,   75,   75,   75,

       75,   75,    0,  188,  188,  188,  188,   75,   75,   75,
      190,  190,  190,  190,   75,    0,   75,   75,  147,  180,
        0,    0,    0,   75,   80,   80,   80,   80,   80,   80,
      191,  191,  191,  191,    0,   80,   80,   80,  188,    0,
        0,    0,    0,    0,   80,   80,   82,   82,   82,   82,
      147,    0,  147,    0,    0,    0,    0,  147,    0,    0,
       82,    0,    0,   82,   82,   82,   82,   82,   82,    0,
        0,    0,    0,    0,   82,   82,   82,   82,   82,   82,
       82,   82,    0,   82,   82,   82,   82,   82,    0,    0,
       82,   91,   91,   91,   91,   91,   91,    0,    0,    0,

        0,    0,   91,   91,   91,    0,    0,    0,    0,    0,
        0,   91,   91,   93,   93,   93,   93,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   93,    0,    0,
       93,   93,   93,   93,   93,   93,    0,    0,    0,    0,
        0,   93,   93,   93,   93,   93,   93,   93,   93,    0,
       93,   93,   93,   93,   93,    0,    0,   93,   95,   95,
       95,   95,    0,    0,    0,    0,    0,    0,   95,    0,
        0,    0,   95,    0,    0,   95,   95,   95,   95,   95,
       95,    0,    0,    0,    0,    0,   95,   95,   95,   95,
       95,   95,   95,   95,    0,   95,   95,   95,   95,   95,

        0,    0,   95,   97,   97,   97,   97,   97,   97,    0,
        0,    0,    0,    0,   97,   97,   97,    0,    0,    0,
        0,    0,    0,   97,   97,  100,  100,  100,  100,  100,
      100,    0,    0,    0,    0,    0,  100,  100,  100,    0,
        0,    0,    0,    0,    0,  100,  100,  102,  102,  102,
      102,  102,  102,    0,    0,    0,    0,    0,  102,  102,
      102,    0,    0,    0,    0,    0,    0,  102,  102,  105,
      105,  105,  105,  105,  105,    0,    0,    0,    0,    0,
      105,  105,  105,    0,    0,    0,    0,    0,    0,  105,
      105,  109,  109,  109,  109,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  109,    0,    0,  109,  109,
      109,  109,  109,  109,    0,    0,    0,    0,    0,  109,
      109,  109,  109,  109,  109,  109,  109,    0,  109,  109,
      109,  109,  109,    0,    0,  109,  111,  111,  111,  111,
      111,  111,    0,    0,    0,    0,    0,  111,  111,  111,
        0,    0,    0,    0,    0,    0,  111,  111,  119,  119,
      119,  119,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  119,    0,  119,    0,    0,    0,    0,  119,  123,

      123,  123,  123,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  123,    0,    0,  123,  123,  123,  123,
      123,  123,    0,    0,    0,    0,    0,  123,  123,  123,
      123,  123,  123,  123,  123,    0,  123,  123,  123,  123,
      123,    0,    0,  123,  125,  125,  125,  125,  125,  125,
        0,    0,    0,    0,    0,  125,  125,  125,    0,    0,
        0,    0,    0,    0,  125,  125,  127,  127,  127,  127,
      127,  127,    0,    0,    0,    0,    0,  127,  127,  127,
        0,    0,    0,    0,    0,    0,  127,  127,  128,  128,
      128,  128,  128,  128,    0,    0,    0,    0,    0,  128,

      128,  128,    0,    0,    0,    0,    0,    0,  128,  128,
      129,  129,  129,  129,  129,  129,    0,    0,    0,    0,
        0,  129,  129,  129,    0,    0,    0,    0,    0,    0,
      129,  129,  130,  130,  130,  130,  130,  130,    0,    0,
        0,    0,    0,  130,  130,  130,    0,    0,    0,    0,
        0,    0,  130,  130,  131,  131,  131,  131,  131,  131,
        0,    0,    0,    0,    0,  131,  131,  131,    0,    0,
        0,    0,    0,    0,  131,  131,  135,  135,  135,  135,
      135,  135,    0,    0,    0,    0,    0,  135,  135,  135,
        0,    0,    0,    0,    0,    0,  135,  135,  136,  136,

      136,  136,  136,  136,    0,    0,    0,    0,    0,  136,
      136,  136,    0,    0,    0,    0,    0,    0,  136,  136,
      143,  143,  143,  143,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  143,  143,    0,    0,    0,    0,
        0,  143,  149,  149,  149,  149,  149,  149,    0,    0,
        0,    0,    0,  149,  149,  149,    0,    0,    0,    0,
        0,    0,  149,  149,  150,  150,  150,  150,  150,  150,
        0,    0,    0,    0,    0,  150,  150,  150,    0,    0,

        0,    0,    0,    0,  150,  150,  151,  151,  151,  151,
      151,  151,    0,    0,    0,    0,    0,  151,  151,  151,
        0,    0,    0,    0,    0,    0,  151,  151,  152,  152,
      152,  152,  152,  152,    0,    0,    0,    0,    0,  152,
      152,  152,    0,    0,    0,    0,    0,    0,  152,  152,
      153,  153,  153,  153,  153,  153,    0,    0,    0,    0,
        0,  153,  153,  153,    0,    0,    0,    0,    0,    0,
      153,  153,  154,  154,  154,  154,  154,  154,    0,    0,
        0,    0,    0,  154,  154,  154,    0,    0,    0,    0,
        0,    0,  154,  154,  155,  155,  155,  155,  155,  155,

        0,    0,    0,    0,    0,  155,  155,  155,    0,    0,
        0,    0,    0,    0,  155,  155,  156,  156,  156,  156,
      156,  156,    0,    0,    0,    0,    0,  156,  156,  156,
        0,    0,    0,    0,    0,    0,  156,  156,  157,  157,
      157,  157,  157,  157,    0,    0,    0,    0,    0,  157,
      157,  157,    0,    0,    0,    0,    0,    0,  157,  157,
      164,  164,  164,  164,  164,  164,    0,    0,    0,    0,
        0,  164,  164,  164,    0,    0,    0,    0,    0,    0,
      164,  164,  165,  165,  165,  165,  165,  165,    0,    0,
        0,    0,    0,  165,  165,  165,    0,    0,    0,    0,

        0,    0,  165,  165,  166,  166,  166,  166,  166,  166,
        0,    0,    0,    0,    0,  166,  166,  166,    0,    0,
        0,    0,    0,    0,  166,  166,  167,  167,  167,  167,
      167,  167,    0,    0,    0,    0,    0,  167,  167,  167,
        0,    0,    0,    0,    0,    0,  167,  167,  168,  168,
      168,  168,  168,  168,    0,    0,    0,    0,    0,  168,
      168,  168,    0,    0,    0,    0,    0,    0,  168,  168,
      169,  169,  169,  169,  169,  169,    0,    0,    0,    0,
        0,  169,  169,  169,    0,    0,    0,    0,    0,    0,
      169,  169,  170,  170,  170,  170,  170,  170,    0,    0,

        0,    0,    0,  170,  170,  170,    0,    0,    0,    0,
        0,    0,  170,  170,  171,  171,  171,  171,  171,  171,
        0,    0,    0,    0,    0,  171,  171,  171,    0,    0,
        0,    0,    0,    0,  171,  171,  172,  172,  172,  172,
      172,  172,    0,    0,    0,    0,    0,  172,  172,  172,
        0,    0,    0,    0,    0,    0,  172,  172,  177,  177,
      177,  177,  177,  177,    0,    0,    0,    0,    0,  177,
      177,  177,    0,    0,    0,    0,    0,    0,  177,  177,
      178,  178,  178,  178,  178,  178,    0,    0,    0,    0,
        0,  178,  178,  178,    0,    0,    0,    0,    0,    0,

      178,  178,  179,  179,  179,  179,  179,  179,    0,    0,
        0,    0,    0,  179,  179,  179,    0,    0,    0,    0,
        0,    0,  179,  179,  181,  181,  181,  181,  181,  181,
        0,    0,    0,    0,    0,  181,  181,  181,    0,    0,
        0,    0,    0,    0,  181,  181,  182,  182,  182,  182,
      182,  182,    0,    0,    0,    0,    0,  182,  182,  182,
        0,    0,    0,    0,    0,    0,  182,  182,  183,  183,
      183,  183,  183,  183,    0,    0,    0,    0,    0,  183,
      183,  183,    0,    0,    0,    0,    0,    0,  183,  183,
      184,  184,  184,  184,  184,  184,    0,    0,    0,    0,

        0,  184,  184,  184,    0,    0,    0,    0,    0,    0,
      184,  184,  187,  187,  187,  187,  187,  187,    0,    0,
        0,    0,    0,  187,  187,  187,    0,    0,    0,    0,
        0,    0,  187,  187,  193,    0,  193,  193,  193,  193,
      194,  194,  194,  195,    0,  195,  195,  195,  195,  196,
        0,  196,  197,    0,  197,  198,  198,  198,  198,  199,
        0,  199,  199,  199,  199,  200,  200,  200,  200,  200,
      200,  201,    0,  201,  201,  201,  201,  202,  202,  202,
      202,  202,  202,  203,  203,  203,  203,  203,  203,  205,
      205,  205,  206,    0,  206,  206,  206,  206,  207,  207,

      207,  208,    0,  208,  208,  208,  208,  209,    0,  209,
      209,  209,  209,  210,  210,  210,  210,  210,  210,  211,
        0,  211,  211,  211,  211,  212,    0,  212,  212,  212,
      212,  213,  213,  213,  213,  213,  213,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
enum css_sym {
S = 1,
INCLUDES,
DASHMATCH,
PREFIXMATCH,
SUFFIXMATCH,
SUBSTRINGMATCH,
IDENT,
STRING,
FUNCTION,
NUMBER,
HASH,
PLUS,
GREATER,
COMMA,
TILDE,
NOT,
ATKEYWORD,
INVALID,
PERCENTAGE,
DIMENSION,
CDO,
CDC
};
#line 937 "lexer.h"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

int yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 54 "lexer.l"


#line 1161 "lexer.h"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 193 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1838 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 56 "lexer.l"
return S;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 58 "lexer.l"
return INCLUDES;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 59 "lexer.l"
return DASHMATCH;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 60 "lexer.l"
return PREFIXMATCH;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "lexer.l"
return SUFFIXMATCH;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 62 "lexer.l"
return SUBSTRINGMATCH;
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 63 "lexer.l"
return IDENT;
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 64 "lexer.l"
return STRING;
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 65 "lexer.l"
return FUNCTION;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 66 "lexer.l"
return NUMBER;
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 67 "lexer.l"
return HASH;
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 68 "lexer.l"
return PLUS;
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 69 "lexer.l"
return GREATER;
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 70 "lexer.l"
return COMMA;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 71 "lexer.l"
return TILDE;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 72 "lexer.l"
return NOT;
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 73 "lexer.l"
return ATKEYWORD;
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 74 "lexer.l"
return INVALID;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "lexer.l"
return PERCENTAGE;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 76 "lexer.l"
return DIMENSION;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "lexer.l"
return CDO;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 78 "lexer.l"
return CDC;
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 80 "lexer.l"
/* ignore comments */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 82 "lexer.l"
return *yytext;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 83 "lexer.l"
ECHO;
	YY_BREAK
#line 1383 "lexer.h"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 193 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 193 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 192);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 83 "lexer.l"
